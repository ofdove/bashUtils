#+title: 实验七报告 钱航 3190611023
* 企业服务负载均衡架构
用户在浏览器上多次访问nginx服务器，nginx将流量轮询传递给两台web服务器，实现了负载均衡，页面登录产生的session信息交给memcache镜像处理，用户数据通过mysql镜像存储在宿主机磁盘中，实现数据的持久化。
* 实验步骤
1. 首先进入一次nginx容器，然后将其配置文件复制到宿主机的 */root/data/nginx* 中
    #+begin_src shell
docker run -it -v /root/data/nginx:/data --rm nginx \\ncp /etc/nginx/conf.d/default.conf /data
    #+end_src
2. 修改default.conf
   #+begin_src shell
upstream 192.168.1.110{
	server web1;
	server web2;
}
server {
    listen       80;
    server_name  localhost;

    #access_log  /var/log/nginx/host.access.log  main;

    location / {
	proxy_pass	http://192.168.1.110;
        # root   /usr/share/nginx/html;
        # index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    location ~ \.php$ {
	    proxy_pass	http://192.168.1.110;
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}
   #+end_src
3. 构建web服务器
   #+begin_src Dockerfile
FROM php:5.6-apache
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini" \
	&& apt-get update && apt-get install -y libmemcached-dev zlib1g-dev \
	&& pecl install memcached-2.2.0 \
	&& docker-php-ext-install mysql && docker-php-ext-enable mysql \
	&& docker-php-ext-install mysqli && docker-php-ext-enable mysqli \
	&& docker-php-ext-enable memcached
   #+end_src
问题：实验文档中需要创建 */usr/local/etc/php/conf.d* ，在实际操作过程中提示文件夹已存在，所以我去除了这条命令。
4. 将php配置文件复制到 */root/data/phpini* 中
   #+begin_src shell
docker run --rm -v /root/data/phpini:/data myphp cp -r /usr/local/etc/php/. /data
   #+end_src
5. 修改 *php.ini* 文件
   #+begin_src shell
session.save_handler = memcache
session.save_path = "tcp://session:11211"
   #+end_src
6. 启动web容器
   #+begin_src shell
docker run -d -p 81:80 \\n-v /root/data/html:/var/www/html \\n-v /root/data/phpini:/usr/local/etc/php --rm --name web1 myphp
   #+end_src
   [[/home/ofdove/Pictures/memcache.png]]
   [[/home/ofdove/Pictures/php.png]]
   [[/home/ofdove/Pictures/mysql.png]]
7. 正式开始搭建网站
    - session缓存容器
      #+begin_src shell
docker run -d --restart=always --name session memcached
      #+end_src

   - mariadb数据库容器
     #+begin_src shell
docker run --name db --restart=always \\n-v /root/data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mariadb:5.5.64
     #+end_src

   - 启动web服务容器
     #+begin_src shell
docker run -d --link db:db --link session:session \\n-v /root/data/html:/var/www/html \\n-v /root/data/phpini:/usr/local/etc/php --restart=always --name web2 myphp
     #+end_src
     #+begin_src shell
docker run -d --link db:db --link session:session \\n-v /root/data/html:/var/www/html \\n-v /root/data/phpini:/usr/local/etc/php --restart=always --name web1 myphp
     #+end_src

   - 启动nginx容器
     #+begin_src shell
docker run -d --restart=always --name lb -p 80:80 -v /root/data/nginx:/etc nginx/conf.d --link web1:web1 --link web2:web2 nginx
     #+end_src

   - 创建数据库
     [[/home/ofdove/Pictures/maraidb.png]]

   - 将typecho文件复制入 */root/data/html/* 下，更改html文件夹读写权限
     #+begin_src shell
chmod 777 /root/data/html
     #+end_src

   - 然后设置管理员帐号密码等，安装完成
     [[/home/ofdove/Pictures/hello_world.png]]
